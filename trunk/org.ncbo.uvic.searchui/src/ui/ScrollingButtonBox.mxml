<?xml version="1.0" encoding="utf-8"?>
<TitledBorderBox xmlns="flex.utils.ui.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:containers="flexlib.containers.*"
	layout="vertical" horizontalScrollPolicy="off" verticalScrollPolicy="off">

	<mx:Script>
		<![CDATA[
			import mx.core.IDataRenderer;
			import mx.controls.Label;
			import mx.core.UIComponent;
			import mx.controls.LinkButton;
			
			public function addButtons(buttons:Array, labelField:String, btnToolTip:String = null, 
					btnStyleName:String = null, clickHandler:Function = null, clickRemoves:Boolean = false):void {
				var label:String;
				for each (var btnData:Object in buttons) {
					if ((labelField != null) && btnData.hasOwnProperty(labelField)) {
						label = String(btnData[labelField]);
					} else {
						label = btnData.toString(); 
					}
					addButton(btnData, label, -1, btnToolTip, btnStyleName, clickHandler, clickRemoves);
				}
			}
			
			public function addButton(btnData:Object, btnLabel:String, index:int = -1, btnToolTip:String = null,
					btnStyleName:String = null, clickHandler:Function = null, clickRemoves:Boolean = false):LinkButton {
				if (!innerBox) {
					return null;
				}
		  		var link:LinkButton = new LinkButton();
				link.data = btnData;
				link.label = (btnLabel != null ? btnLabel : String(btnData));
				link.toolTip = btnToolTip;
				link.styleName = btnStyleName;
				if (clickHandler != null) {
					link.addEventListener(MouseEvent.CLICK, clickHandler);
				}
				if (clickRemoves) {
					link.addEventListener(MouseEvent.CLICK, clickRemoveButtonHandler);
				}
				if ((index >= 0) && (index < innerBox.numChildren)) {
					innerBox.addChildAt(link, index);
				} else {
					innerBox.addChild(link);
				}
				return link;
			}
			
			public function addLabel(lblData:Object, lblText:String, index:int = -1, lblToolTip:String = null,
									 lblStyleName:String = null):Label {
				if (!innerBox) {
					return null;
				}
				var lbl:Label = new Label();
				lbl.data = lblData;
				lbl.text = (lblText != null ? lblText : String(lblData));
				lbl.toolTip = lblToolTip;
				lbl.styleName = lblStyleName;
				if ((index >= 0) && (index < innerBox.numChildren)) {
					innerBox.addChildAt(lbl, index);
				} else {
					innerBox.addChild(lbl);
				}
				return lbl;
			}
			
			public function removeButtonByData(btnData:Object):Boolean {
				var removed:Boolean = false;
				if (innerBox && (innerBox.numChildren > 0)) {
					for (var i:int = 0; i < innerBox.numChildren; i++) {
						var child:IDataRenderer = (innerBox.getChildAt(i) as IDataRenderer);
						if (child.data == btnData) {
							innerBox.removeChildAt(i);
							removed = true;
							break;
						}
					}
				}
				return removed;
			}
			
			public function removeButton(btn:UIComponent):void {
				if (innerBox && btn && (btn.parent == innerBox)) {
					innerBox.removeChild(btn);
					btn.removeEventListener(MouseEvent.CLICK, clickRemoveButtonHandler);
				}
			}
			
			public function removeButtonAt(index:uint):UIComponent {
				if (index < numButtons) {
					return (innerBox.removeChildAt(index) as UIComponent);
				}
				return null;
			}
			
			public function removeAllButtons():void {
				innerBox.removeAllChildren();
			}
			
			public function clickRemoveButtonHandler(event:MouseEvent):void {
				var btn:UIComponent = (event.currentTarget as UIComponent);
				if (btn) {
					removeButton(btn);
				}
			}
			
			public function get numButtons():uint {
				return (innerBox ? innerBox.numChildren : 0);
			}
			
			public function getButtonAt(index:uint):UIComponent {
				if (index < numButtons) {
					return (innerBox.getChildAt(index) as LinkButton);
				} 
				return null;
			}
			
		]]>
	</mx:Script>

	<containers:ButtonScrollingCanvas width="100%" height="100%" 
		scrollSpeed="5" scrollJump="2" verticalScrollPolicy="off" buttonWidth="20" 
		startScrollingEvent="{MouseEvent.MOUSE_OVER}" stopScrollingEvent="{MouseEvent.MOUSE_OUT}">
		<mx:HBox height="100%" verticalAlign="middle" id="innerBox" 
			horizontalScrollPolicy="off" verticalScrollPolicy="off">
		</mx:HBox>
	</containers:ButtonScrollingCanvas>

</TitledBorderBox>
