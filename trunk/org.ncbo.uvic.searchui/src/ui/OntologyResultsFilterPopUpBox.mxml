<?xml version="1.0" encoding="utf-8"?>
<resize:ResizableBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:resize="flex.utils.ui.resize.*" xmlns:ui="flex.utils.ui.*"
	width="280" height="200" minWidth="230" minHeight="100" direction="vertical"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" creationPolicy="all">

	<mx:Script>
		<![CDATA[
			import org.ncbo.uvic.flex.logging.LogService;
			import flex.utils.ui.events.ItemsChangedEvent;
			import org.ncbo.uvic.flex.model.NCBOSearchResultOntology;
			import mx.events.CollectionEvent;
			import org.ncbo.uvic.flex.model.NCBOOntology;
			import mx.collections.ICollectionView;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.controls.PopUpButton;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.MenuEvent;
			
			public var showOntologyResultsButton:PopUpButton;
			private var ignoreNextSortEvent:Boolean = false;
			private var lastOntologyResultSortBy:String = null;
			private var selectedOntologyResults:uint = 0;

			[Bindable]
			private var ontologyResults:ArrayCollection = new ArrayCollection();
			private var conceptResults:ICollectionView;
			
			[Bindable]
			private var status:String = "";

			public function init(ontologies:ArrayCollection, concepts:ICollectionView, popupButton:PopUpButton):void {
				this.ontologyResults = ontologies;
				this.conceptResults = concepts;
				this.showOntologyResultsButton = popupButton;
				this.ontologyResults.addEventListener(CollectionEvent.COLLECTION_CHANGE, ontologyResultsChanged);
			}
						
			private function selectAllResultOntologies():void {
				ontologyResultsList.selectAll();
			}
			
			private function selectNoResultOntologies():void {
				ontologyResultsList.selectNone();
			}
			
			private function sortOntologyResults(event:MenuEvent):void {
				// when the user clickes the main portion of the sort popup button we need to ignore the next event
				if (ignoreNextSortEvent) {
					ignoreNextSortEvent = false;
					return;
				}
				
				var sortBy:String = event.label; 
				var fields:Array = [];
				var descending:Boolean = false;
				if (lastOntologyResultSortBy == sortBy) {
					lastOntologyResultSortBy = null;
					descending = true;
				} else {
					lastOntologyResultSortBy = sortBy; 
				}
				if (sortBy == sortByName) {
					fields.push(new SortField("displayLabel", true, descending));
				} else if (sortBy == sortByHits) {
					// invert the descending property because we want highest hits first by default
					fields.push(new SortField("hits", false, !descending, true));
				}
				var sort:Sort = new Sort();
				sort.fields = fields;
				ontologyResults.sort = sort;
				ontologyResults.refresh();
			}
			
			private function sortOntologiesButtonDown(event:FlexEvent):void {
				// don't sort on the next event - this happens when the main button is clicked
				ignoreNextSortEvent = true;
			}
			
			private function ontologyResultsChanged(event:Event = null):void {
				var total:int = ontologyResults.length;
				selectedOntologyResults  = 0; 
				// save this for the conceptFilterFunction to save time
				if (ontologyResultsList) {
					selectedOntologyResults = ontologyResultsList.selectedItems.length;
				}
				if ((selectedOntologyResults > 0) && (selectedOntologyResults < total)) {
					status = selectedOntologyResults + "/" + total + " ontologies selected";
					showOntologyResultsButton.label = selectedOntologyResults + "/" + total + " ontologies";
				} else {
					var str:String = total + " ontolog" + (total == 1 ? "y" : "ies"); 
					status = str + (selectedOntologyResults == 0 ? "" : " selected");
					showOntologyResultsButton.label = str;
				}
				conceptResults.refresh();
			}
			
			private function itemsChanged(event:ItemsChangedEvent):void {
				ontologyResultsChanged(event);
				LogService.logNavigationEvent("", "", "ontology filter", "", selectedOntologyResults);
			}

			public function isSelected(ontology:NCBOSearchResultOntology):Boolean {
				if (ontologyResultsList && (selectedOntologyResults > 0)) {
					return ontologyResultsList.isSelected(ontology);
				}
				return true;
			}
			
			
		]]>
	</mx:Script>
	
	<mx:Array id="sortOptions">
		<mx:String id="sortByName">Name</mx:String>
		<mx:String id="sortByHits">Hits</mx:String>
	</mx:Array>
	
	<mx:HBox id="selectAllResultsBox" width="100%" height="26" styleName="barBox" horizontalAlign="center">
		<mx:Spacer width="20%" height="16"/>
		<mx:HBox width="60%" horizontalAlign="center" horizontalGap="2">
			<mx:LinkButton id="selectAllResultsLink" click="selectAllResultOntologies()" styleName="link"  
				label="Select All" toolTip="Select all matching ontologies"/>
			<mx:LinkButton id="selectNoneResutsLink" click="selectNoResultOntologies()" styleName="link"  
				label="Select None" toolTip="Unselect all matching ontologies"/>
		</mx:HBox>
		<mx:HBox width="20%" horizontalAlign="right" horizontalGap="2">
			<mx:PopUpMenuButton id="sortButton" label="Sort By" dataProvider="{sortOptions}" openAlways="true"
				itemClick="sortOntologyResults(event)" buttonDown="sortOntologiesButtonDown(event)"/>
		</mx:HBox>
	</mx:HBox>
	<ui:ButtonBox id="ontologyResultsList" width="100%" height="100%" dataField="nameAndHits"
		dataProvider="{ontologyResults}" itemRenderer="renderers.OntologySearchResultItemRenderer" 
		itemsChanged="itemsChanged(event)"/>
	<mx:HBox styleName="barBox" width="100%" horizontalScrollPolicy="off" paddingRight="16">
		<mx:Label id="ontologyResultsStatusLabel" text="{status}"/>
		<mx:Spacer width="100%" height="16"/>
		<mx:Button label="Close" height="18" click="showOntologyResultsButton.close()"/>
	</mx:HBox>
	
</resize:ResizableBox>
