<?xml version="1.0" encoding="utf-8"?>
<FlexGraph xmlns="ca.uvic.cs.chisel.flexviz.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" ignoreBounds="false"
	creationComplete="created()" nodeDoubleClick="nodeDoubleClicked(event)">

	<mx:Script>
		<![CDATA[
			import ca.uvic.cs.chisel.flexviz.layouts.CircleLayoutCenterAlgorithm;
			import org.ncbo.uvic.flex.util.NavigateToBioPortal;
			import org.ncbo.uvic.flex.NCBOAppParams;
			import org.ncbo.uvic.flex.logging.FlexVizLogger;
			import org.ncbo.uvic.flex.events.NCBOOntologyEvent;
			import mx.messaging.config.ServerConfig;
			import ca.uvic.cs.chisel.flexviz.events.GraphNodeEvent;
			import ca.uvic.cs.chisel.flexviz.model.GroupedNode;
			import org.ncbo.uvic.flex.Shared;
			import flex.utils.ui.UIUtils;
			import flex.utils.Utils;
			import mx.events.FlexEvent;
			import ca.uvic.cs.chisel.flexviz.layouts.algorithms.CircleLayoutAlgorithm;
			import ca.uvic.cs.chisel.flexviz.layouts.algorithms.HorizontalLayoutAlgorithm;
			import ca.uvic.cs.chisel.flexviz.layouts.algorithms.VerticalLayoutAlgorithm;
			import ca.uvic.cs.chisel.flexviz.layouts.algorithms.GridLayoutAlgorithm;
			import ca.uvic.cs.chisel.flexviz.layouts.algorithms.HorizontalTreeLayoutAlgorithm;
			import ca.uvic.cs.chisel.flexviz.layouts.algorithms.VerticalTreeLayoutAlgorithm;
			import ca.uvic.cs.chisel.flexviz.layouts.algorithms.RadialLayoutAlgorithm;
			import ca.uvic.cs.chisel.flexviz.layouts.algorithms.ILayoutAlgorithm;
			import ca.uvic.cs.chisel.flexviz.layouts.Layouts;
			import ca.uvic.cs.chisel.flexviz.ui.HelpPanel;
			import org.ncbo.uvic.flex.FlexVizParams;
			import org.ncbo.uvic.flex.OntologyConstants;
			import org.ncbo.uvic.flex.search.SearchBy;
			import org.ncbo.uvic.flex.search.SearchMode;
			import org.ncbo.uvic.flex.search.SearchShowOption;
			import org.ncbo.uvic.flex.search.NCBOSearchProvider;
			import org.ncbo.uvic.flex.ui.NCBOColorProvider;
			import org.ncbo.uvic.flex.ui.NCBONodeRenderer;
			import org.ncbo.uvic.flex.ui.NCBOArcRenderer;
			import org.ncbo.uvic.flex.ui.NCBOHelpPanel;
			import org.ncbo.uvic.flex.NCBOVersion;
			import flash.net.navigateToURL;
			import mx.core.Application;
			import mx.controls.Button;
			import mx.containers.HBox;
			import mx.controls.ComboBox;
			import mx.managers.PopUpManager;

			[Embed(source="/assets/email.gif")]
			public var emailIcon:Class;
			[Embed(source="/assets/bug.gif")]
			public var bugIcon:Class;
			[Embed(source="/assets/open_full_version.png")]
			public var fullVersionIcon:Class;
			
			private var _searchProvider:NCBOSearchProvider; 
			private var _fullVersionURL:String = "";
			// if true then nodes can be expanded/collapsed/removed
			private var _allowNavigation:Boolean = false;
			private var showOntologyName:Boolean = false;
			
			private var _lastNodeID:String = "0";
			private var _topBar:HBox;
			private var _graphViewsCombo:ComboBox;
			private var _emailButton:Button;
			private var _bugButton:Button;
			private var _fullVersionButton:Button;
			
			private var navigationMenuItems:Array = [];

			private var helpPanel:HelpPanel;
			
			public function get lastNodeID():String {
				return _lastNodeID;
			}
			
			protected function loadParameters():void {
				// set the DEBUG flag first since other things depend on it
				_debug = FlexVizParams.getBooleanParam(NCBOAppParams.DEBUG, NCBOAppParams.DEFAULT_DEBUG);
				//searchProvider.userID = FlexVizParams.getParam(FlexVizParams.USERID);
				var title:String = FlexVizParams.getParam(NCBOAppParams.TITLE);
				if (title) {
					searchProvider.baseTitle = title;
				}

				emailURL = FlexVizParams.getParam(FlexVizParams.ADMIN_EMAIL, FlexVizParams.DEFAULT_ADMIN_EMAIL);
				bugURL = FlexVizParams.getParam(FlexVizParams.BUG_URL, FlexVizParams.DEFAULT_BUG_URL);
				fullVersionURL = FlexVizParams.getParam(FlexVizParams.FULL_VERSION_URL, fullVersionURL);
				allowNavigation = FlexVizParams.getBooleanParam(FlexVizParams.ALLOW_NAVIGATION, FlexVizParams.DEFAULT_ALLOW_NAVIGATION);
				
				animateLayouts = FlexVizParams.getBooleanParam(FlexVizParams.ANIMATE, true);
				showOntologyName = FlexVizParams.getBooleanParam(FlexVizParams.SHOW_ONTOLOGY_NAME, false);
				
				var linkToURL:String = FlexVizParams.getParam(FlexVizParams.LINK_TO_URL);
				searchProvider.linkToURL = (linkToURL ? linkToURL : NCBOSearchProvider.BASIC_LINK_TO_URL);
				
				var redirectURL:String = FlexVizParams.getParam(NCBOAppParams.REDIRECT_URL);
				if (redirectURL) {
					NavigateToBioPortal.baseURL = redirectURL;
				}
			}

			override protected function addChildren():void {
				loadParameters();
				
				addChild(topBar);
				super.addChildren();
			} 
			
			override public function get VERSION():String {
				return NCBOVersion.VERSION_DATE;
			}
			
			protected function get topBar():HBox {
				if (_topBar == null) {
					_topBar = new HBox();
					_topBar.percentWidth = 100;
					_topBar.setStyle("paddingBottom", 5);
					_topBar.setStyle("paddingLeft", 5);
					_topBar.setStyle("paddingRight", 5);
					_topBar.setStyle("paddingTop", 5);
					_topBar.setStyle("horizontalGap", 2);
					_topBar.addChild(graphViewsCombo);
					_topBar.addChild(UIUtils.createSpacer(100, 16, true, false));
					if (DEBUG) {
						_topBar.addChild(UIUtils.createTextButton("Debug", function(event:MouseEvent):void {
							searchProvider.showDebugPanel();
						}, "Show Debug Panel"));
					}
					_topBar.addChild(emailButton);
					// commented out March 30th, 2009 - users don't want to add bugs?
					//_topBar.addChild(bugButton);
					_topBar.addChild(fullVersionButton);
				}
				return _topBar;
			}
			
			public function get graphViewsCombo():ComboBox {
				if (_graphViewsCombo == null) {
					_graphViewsCombo = new ComboBox();
					_graphViewsCombo.dataProvider = [ OntologyConstants.SHOW_NETWORK_NEIGHBORHOOD, 
													  OntologyConstants.SHOW_HIERARCHY_TO_ROOT ];
					_graphViewsCombo.selectedIndex = 0;
					_graphViewsCombo.addEventListener(Event.CHANGE, graphViewsChanged);
				}
				return _graphViewsCombo;
			}
			
			public function get emailButton():Button {
				if (_emailButton == null) {
					_emailButton = UIUtils.createIconButton(emailIcon, emailHandler, 
						"Email a bug report or feature request", ICON_BTN_SIZE, ICON_BTN_SIZE);
				}
				return _emailButton;
			}
			
			public function get bugButton():Button {
				if (_bugButton == null) {
					_bugButton = UIUtils.createIconButton(bugIcon, bugHandler, 
						"Submit a bug report or feature request", ICON_BTN_SIZE, ICON_BTN_SIZE);
				}
				return _bugButton;
			}
			
			public function get fullVersionButton():Button {
				if (_fullVersionButton == null) {
					_fullVersionButton = UIUtils.createIconTextButton("Full Version", fullVersionIcon, openFullVersion, 
						"Open the full version in a new window");
				}
				return _fullVersionButton;
			}

			public function get swfID():String {
				return (Application.application.parameters.hasOwnProperty("swfid") ? 
					String(Application.application.parameters.swfid) : Application.application.id);
			}

			protected function keyDownListener(event:KeyboardEvent):void {
				var char:String = String.fromCharCode(event.charCode).toUpperCase();
				if (event.ctrlKey && event.shiftKey && (char == "D")) {
					event.stopImmediatePropagation();
					searchProvider.showDebugPanel();
				} else if (event.keyCode == Keyboard.F1) {
					event.stopImmediatePropagation();
					openHelp(event);
				} else if (allowNavigation) {
					if (char == "N") {
						searchProvider.showNeighborsOfSelected(SearchShowOption.NEIGHBORHOOD, !event.shiftKey);
					} else if (char ==  "P") {
						searchProvider.showParentsOfSelected(!event.shiftKey);
					} else if (char == "C") {
						searchProvider.showChildrenOfSelected(!event.shiftKey);
					} else if (char == "H") {
						searchProvider.showHierarchyToRootOfSelected(!event.shiftKey);
					}
				}
			}
		
			protected function appCompleteHandler(event:FlexEvent):void {
				Application.application.stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);
				// notify javascript that we are finished loading
				callLater(function():void {
					ExternalInterface.call("flexVizLoaded", swfID);
				});
			}
		
			private function created():void {
				// add the default focus
				graphViewsCombo.setFocus();
				
				// disable saving history - no point?
				navigationManager.enabled = false;
				
				Application.application.addEventListener(FlexEvent.APPLICATION_COMPLETE, appCompleteHandler);
				
				var highlightArcs:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.HIGHLIGHT_ARCS, FlexVizParams.DEFAULT_HIGHLIGHT_ARCS);
				
				var sharedColors:NCBOColorProvider = new NCBOColorProvider();
				this.arcRenderer = new NCBOArcRenderer(sharedColors, searchProvider.getRelationship, highlightArcs);
				this.nodeRenderer = new NCBONodeRenderer(sharedColors, searchProvider.getConcept, 
														searchProvider.childrenVisibleByID, allowNavigation);
				
				var nodeToolTips:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.NODE_TOOLTIPS, true);
				nodeRenderer.toolTipEnabled = nodeToolTips;
				var arcToolTips:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.ARC_TOOLTIPS, true);
				arcRenderer.toolTipEnabled = arcToolTips; 
				
				// don't show the progress stop button for now
				progressPanel.showStopButton = false;
				progressPanel.showCloseButton = true;
				
				// in this graph show arc labels
				this.showArcLabels = true;
			}	
			
			private function graphViewsChanged(event:Event):void {
				if (graphViewsCombo.selectedIndex == 0) {
					// show neighborhood
					searchProvider.showOption = SearchShowOption.NEIGHBORHOOD;
				} else {
					// show hierarchy
					searchProvider.showOption = SearchShowOption.HIERARCHY_TO_ROOT;						
				}
				if (searchProvider.lastSearch == null) {
					searchProvider.showRoots();	
				} else {
					searchProvider.performLastSearch();
				}
			}
			
			public function get searchProvider():NCBOSearchProvider {
				if (_searchProvider == null) {
					_searchProvider = new NCBOSearchProvider(this);
					_searchProvider.initLogger();
				}
				return _searchProvider;
			}
			
			public function get fullVersionURL():String {
				return _fullVersionURL;
			}
			
			public function set fullVersionURL(url:String):void {
				_fullVersionURL = (url != null ? url : "");
			}
			
			/**
			 * Returns true if double clicking on a node causes the neighborhood to 
			 * be expanded or collapsed (false by default). Also will add context menu items.
			 */
			public function get allowNavigation():Boolean {
				return _allowNavigation;
			}
			
			public function set allowNavigation(allow:Boolean):void {
				if (allow != _allowNavigation) {
					_allowNavigation = allow;
					if (allow) {
						addNavigationMenuItems();
					} else {
						removeNavigationMenuItems();
					}
				}
			}
			
			public function hideTopBar():void {
				if (topBar.parent == this) {
					removeChild(topBar);
				}
			}
			
			public function showTopBar():void {
				if (topBar.parent == null) {
					addChildAt(topBar, 0);
				}
			}
			
			public function loadOntology(ontologyID:String, nodeID:String = null, isVirtual:Boolean = false, 
										 option:SearchShowOption = null):void {
						
				if (isVirtual) {
					// load the ontology and set the ontology version id
					var callback:Function = function(event:NCBOOntologyEvent):void {
						if (!event.isError && event.ontology) {
							loadOntology(event.ontology.ontologyVersionID, nodeID, false, option);
						} else {
							trace("Invalid virtual ontology id: " + ontologyID); 
						}
					};
					searchProvider.service.getOntologyByVirtualID(ontologyID, callback);
				} else {
					var showRoots:Boolean = (nodeID == null) || (nodeID.length == 0);
					if (searchProvider.ontologyID != ontologyID) {
						searchProvider.ontologyID = ontologyID;
						// clear the graph
						clear();
					}
					searchProvider.searchBy = SearchBy.ID;
					searchProvider.searchMode = SearchMode.EXACT_MATCH;
					if (option == null) {
						// load from Shared
						option = Shared.loadSearchShowOption();
					}
					// when showing roots it looks better to show the neighborhood instead of the hierarchy to root
					if (showRoots) {
						option = SearchShowOption.NEIGHBORHOOD;
					} else if ((option != SearchShowOption.HIERARCHY_TO_ROOT) && (option != SearchShowOption.NEIGHBORHOOD)) {
						option = SearchShowOption.NEIGHBORHOOD;
					}
					if (option != null) {
						searchProvider.showOption = option;
						// Strings are used instead of the SearchShowOption
						graphViewsCombo.selectedItem = (option == SearchShowOption.HIERARCHY_TO_ROOT ? 
							OntologyConstants.SHOW_HIERARCHY_TO_ROOT : OntologyConstants.SHOW_NETWORK_NEIGHBORHOOD);
					}
									
					if (ontologyID != null) {
						// show roots?
						if (showRoots) {
							_lastNodeID = "0";
							searchProvider.showRoots();	
						} else {
							_lastNodeID = nodeID;
							searchProvider.performSearch(nodeID);
						}
					}
					
					if (showOntologyName) {
						searchProvider.loadOntologyName();
					}
				}
			} 
			
			
			private function saveSharedGraph():void {
				if (searchProvider.ontologyID != null) {
					try {
						Shared.saveSharedGraph(this, searchProvider, _lastNodeID);
					} catch (error:Error) {
						trace("BasicFlexoVizComponent: error saving shared data.");
						trace("This is most likely a permissions problem or perhaps the XML is badly formed?");
						trace(error);
					}
				}
			}
			
			override protected function createNodesLayerContextMenuItems(menu:ContextMenu):void {
				// don't load the default menu items!
				//super.createNodesLayerContextMenuItems(menu);
				
				var linkToItem:ContextMenuItem = new ContextMenuItem("Link To This Term", true);
				linkToItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
					searchProvider.showLinkToWindow(true);
				});
				menu.customItems.push(linkToItem);
								
				var propertiesItem:ContextMenuItem = new ContextMenuItem("Properties", true);
				propertiesItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
					searchProvider.showSelectedNodeProperties();
				});
				menu.customItems.push(propertiesItem);
				
				// update the menu items enablement based on the selected items
				menu.addEventListener(ContextMenuEvent.MENU_SELECT, function(event:ContextMenuEvent):void {
					var selNodes:Array = selectedNodes;
					var oneOnly:Boolean = (selNodes.length == 1);
					// don't show links & properties for grouped nodes
					linkToItem.enabled = oneOnly && !(selNodes[0] is GroupedNode);
					propertiesItem.enabled = oneOnly && !(selNodes[0] is GroupedNode);
				});
			}
			
			override protected function createArcsLayerContextMenuItems(menu:ContextMenu):void {
				// do nothing - don't load the default arc menu items
			}
			
			override protected function createCanvasContextMenuItems(menu:ContextMenu):void {
				super.createCanvasContextMenuItems(menu);
				
				var hideTopBar:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.HIDE_TOPBAR, FlexVizParams.DEFAULT_HIDE_TOPBAR);
				var hideFullVersion:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.HIDE_FULLVERSION, FlexVizParams.DEFAULT_HIDE_FULLVERSION);
				if (!hideTopBar && !hideFullVersion) { 
					var fullVersionItem:ContextMenuItem = new ContextMenuItem("Open full version in a new window", true);
					fullVersionItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
						openFullVersion(event);
					});
					menu.customItems.push(fullVersionItem);
				}
				
				/* These are unneccesary since they are in the top toolbar too
				var emailItem:ContextMenuItem = new ContextMenuItem("Email feedback!", true);
				emailItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, emailHandler);
				menu.customItems.push(emailItem);

				var bugItem:ContextMenuItem = new ContextMenuItem("Submit a bug", false);
				bugItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, bugHandler);
				menu.customItems.push(bugItem);
				*/
				
				menu.customItems.push(createLayoutContextMenuItem(VerticalTreeLayoutAlgorithm.NAME, true));
				menu.customItems.push(createLayoutContextMenuItem(HorizontalTreeLayoutAlgorithm.NAME));
				menu.customItems.push(createLayoutContextMenuItem(RadialLayoutAlgorithm.NAME));
				menu.customItems.push(createLayoutContextMenuItem(GridLayoutAlgorithm.NAME_ALPHA));
				menu.customItems.push(createLayoutContextMenuItem(CircleLayoutAlgorithm.NAME));
				menu.customItems.push(createLayoutContextMenuItem(CircleLayoutCenterAlgorithm.NAME));
				menu.customItems.push(createLayoutContextMenuItem(VerticalLayoutAlgorithm.NAME));
				menu.customItems.push(createLayoutContextMenuItem(HorizontalLayoutAlgorithm.NAME));
				
				var configureNodeLabels:ContextMenuItem = new ContextMenuItem("Configure Node Labels", true);
				configureNodeLabels.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
					searchProvider.chooseLabelField();
				});
				menu.customItems.push(configureNodeLabels);
				
				var showArcLabelsItem:ContextMenuItem = new ContextMenuItem((this.showArcLabels ? "Hide Arc Labels" : "Show Arc Labels"), true);
				var rotateArcLabelsItem:ContextMenuItem = new ContextMenuItem((this.rotateArcLabels ? "Don't Rotate Labels" : "Rotate Labels"), false);
				rotateArcLabelsItem.enabled = this.showArcLabels;

				showArcLabelsItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
					showArcLabels = !showArcLabels;
				});
				rotateArcLabelsItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
					rotateArcLabels = !rotateArcLabels;
				});
				menu.customItems.push(showArcLabelsItem);
				menu.customItems.push(rotateArcLabelsItem);
				
				var helpItem:ContextMenuItem = new ContextMenuItem("Help", true);
				helpItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, openHelp);
				menu.customItems.push(helpItem);
				
				menu.addEventListener(ContextMenuEvent.MENU_SELECT, function(event:ContextMenuEvent):void {
					showArcLabelsItem.caption = (showArcLabels ? "Hide Arc Labels" : "Show Arc Labels");
					rotateArcLabelsItem.enabled = showArcLabels;
					rotateArcLabelsItem.caption = (rotateArcLabels ? "Don't Rotate Labels" : "Rotate Labels");
				});
			}
			
			private function createLayoutContextMenuItem(layoutName:String, separatorBefore:Boolean = false):ContextMenuItem {
				var layout:ILayoutAlgorithm = Layouts.getInstance().getLayout(layoutName);
				var cmi:ContextMenuItem = new ContextMenuItem(layoutName, separatorBefore);
				if (layout != null) {
					cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, runLayoutHandler);
				} else {
					trace("Warning - couldn't find layout with name '" + layoutName + "'");
					cmi.visible = false;
				}
				return cmi;
			}
			
			protected function runLayoutHandler(event:ContextMenuEvent):void {
				var cmi:ContextMenuItem = ContextMenuItem(event.target);
				var layoutName:String = String(cmi.caption);
				var layout:ILayoutAlgorithm = Layouts.getInstance().getLayout(layoutName);
				if (layout != null) {
					runLayout(layout);
				} else {
					trace("Warning - couldn't find layout " + layoutName);
				}
			}
			
			protected function openFullVersion(event:Event = null):void {
				// save the graph to disk for the full version of flexviz to access
				saveSharedGraph();
				
				var url:String = "FlexoViz.html";
				if (fullVersionURL.length == 0) {
					var loaderURL:String = Application.application.loaderInfo.url;
					var index:int = loaderURL.indexOf("BasicFlexoViz.swf");
					if (index != -1) {
						url = loaderURL.substring(0, index) + "FlexoViz.html"
					}
				} else {
					url = fullVersionURL;
				}
				navigateToURL(new URLRequest(url), "FlexoViz");
				
				searchProvider.service.getNCBOOntology(searchProvider.ontologyID, function(event:NCBOOntologyEvent):void {
					if (!event.isError && event.ontology) {
						FlexVizLogger.logOpenFullVersionEvent(event.ontology.id, event.ontology.ontologyID, event.ontology.name);
					}
				}, true, false);
				
			}
			
			private function openHelp(event:Event = null):void {
				if ((helpPanel == null) || (helpPanel.parent == null)) {
					helpPanel = new NCBOHelpPanel();
					helpPanel.showCloseButton = true;
					PopUpManager.addPopUp(helpPanel, this, true);
					helpPanel.showDragHandle = false;
					PopUpManager.centerPopUp(helpPanel);
				} else {
					PopUpManager.removePopUp(helpPanel);
					helpPanel = null;
				}
			}
			
			private function nodeDoubleClicked(event:GraphNodeEvent):void {
				if (allowNavigation) {
					searchProvider.toggleNeighborhood(event.node);
				}
			}
			
			private function addNavigationMenuItems():void {
				var menu:ContextMenu = nodesLayerContextMenu;
				if (navigationMenuItems.length == 0) {
					var removeItem:ContextMenuItem = new ContextMenuItem("Remove Nodes", true);
					removeItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
						searchProvider.removeSelected();
					});
					menu.customItems.push(removeItem);
					navigationMenuItems.push(removeItem);

					var showChildrenItem:ContextMenuItem = new ContextMenuItem("Show Children", false);
					showChildrenItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
						searchProvider.showChildrenOfSelected();
					});
					menu.customItems.push(showChildrenItem);
					navigationMenuItems.push(showChildrenItem);
					
					var removeChildrenItem:ContextMenuItem = new ContextMenuItem("Hide Children", false);
					removeChildrenItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
						searchProvider.removeChildrenOfSelected();
					});
					menu.customItems.push(removeChildrenItem);
					navigationMenuItems.push(removeChildrenItem);
					
					var focusOnNeighborhoodItem:ContextMenuItem = new ContextMenuItem("Focus On Neighborhood", false);
					focusOnNeighborhoodItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
						searchProvider.showNeighborsOfSelected(SearchShowOption.NEIGHBORHOOD, true);
					});
					menu.customItems.push(focusOnNeighborhoodItem);
					navigationMenuItems.push(focusOnNeighborhoodItem);
				}
			}
			
			private function removeNavigationMenuItems():void {
				var menu:ContextMenu = nodesLayerContextMenu;
				for each (var item:ContextMenuItem in navigationMenuItems) {
					var index:int = menu.customItems.indexOf(item);
					if (index != -1) {
						menu.customItems.splice(index, 1);
					}
				}
				navigationMenuItems = [];
			} 
			
		]]>
	</mx:Script>

</FlexGraph>
