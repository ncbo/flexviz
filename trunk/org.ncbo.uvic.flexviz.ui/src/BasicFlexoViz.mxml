<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundColor="0xffffff"
	xmlns:local="*" pageTitle="BioPortal Ontology Visualization"
	creationComplete="created(event)" preloader="preloader.NCBOSmallPreloader"
	implements="IExternalGraphInterface">

<!--
BasicFlexoViz Parameters:

	// the ID (version or virtual) of the ontology to load.
	ontology = null

	// set to true to use a virtual ontology ID, set to false (default) to use the version id
	virtual = false

	// debug messages will be displayed (true or false)
	debug = false
	
	// the base server url (defaults to "http://rest.bioontology.org/bioportal/")
	server = null 
	
	// the id of the node to display, if blank and searchText is blank, 
	// then the root nodes are displayed and their children
	nodeid = ""
	
	// Displays a popup dialog warning the user if no ontology has been defined (true|false)
	alertnoontology = false
	
	// what to show: "Neighborhood", "Hierarchy To Root"
	show = "Neighborhood"

	// the currently logged on user
	userid = null

	// hides the full version button in the top right corner (true|false)
	hidefullversion = false

	// hides the top bar (which contains the dropdown and full version)
	hidetopbar = false

	// hides the email button in the top right corner (true|false)
	hideemail = false

	// if arc labels should be shown (true|false)
	showarclabels = true
	
	// if arc labels are shown, then whether or not they should be rotated (true|false)
	rotatearclabels = true
	
	// the email address for FlexViz
	adminemail = "admin@bioontology.org"
	
	// the bug tracker url for FlexViz
	bugurl = "https://bmir-gforge.stanford.edu/gf/project/flexviz/tracker/"

	// the browser title
	title = "BioPortal Ontology Visualization"
	
	// if true then the ontology name will shown in the header 
	showontologyname = "false"

	// logging parameter - if true then flexviz usage is logged
	log = true
	
	// if true then navigation is allowed - expand, collapse, double click, etc
	allownavigation = false 
	
	// if true then an alert box will show up on startup if no ontology is defined
	alertnoontology = false
		
	// if false then arcs aren't highlighted on mouseover
	highlightarcs = true
	
	// if false then no tooltips are shown over nodes
	nodetooltips = true
	
	// if false the no tooltips are shown over arcs
	arctooltips = true
	
	// if false then no animation is performed during a layout
	animate = true
	
-->
	
	<mx:Script>
		<![CDATA[
			import org.ncbo.uvic.flex.NCBOAppParams;
			import mx.rpc.events.HeaderEvent;
			import ca.uvic.cs.chisel.flexviz.events.GraphNodeEvent;
			import ca.uvic.cs.chisel.flexviz.events.SelectedNodesChangedEvent;
			import mx.events.FlexEvent;
			import mx.controls.Alert;
			import mx.utils.StringUtil;
			import flex.utils.ArrayUtils;
			import flex.utils.Utils;
			import ca.uvic.cs.chisel.flexviz.model.IGraphNode;
			import org.ncbo.uvic.flex.search.SearchMode;
			import org.ncbo.uvic.flex.FlexVizParams;
			import org.ncbo.uvic.flex.search.SearchShowOption;
			import org.ncbo.uvic.flex.logging.LogService;
					
			private function created(event:FlexEvent):void {
				// When FlexViz is loaded by another SWF then parameters can be passed in through
				// the loading SWF URL (e.g. BasicFlexoViz.swf?ontology=12345
				// the Utils class can't get at these parameters, so the only way to do this 
				// is to add the parameters directory from this application
				if (application.loaderInfo != null) {
					FlexVizParams.addParams(parameters);
				}
				// need to set the full url for the BasicFlexoViz.swf file - it is needed for the link to concept
				flexoviz.searchProvider.swfURL = url;
				
				var log:Boolean = FlexVizParams.getBooleanParam(NCBOAppParams.LOG, NCBOAppParams.DEFAULT_LOG) || FlexVizParams.getBooleanParam(NCBOAppParams.LOGGING, NCBOAppParams.DEFAULT_LOG);
				LogService.initialize(log, "basicflexviz");
				
				var title:String = FlexVizParams.getParam(NCBOAppParams.TITLE);
				if (title != null) {
					Utils.changeBrowserTitle(title);
				}
								
				// set the server url
				var serverURL:String = FlexVizParams.getParam(NCBOAppParams.SERVER);
				if (serverURL) {
					flexoviz.searchProvider.baseServerURL = serverURL;
				}
				
				var apikey:String = FlexVizParams.getParam(NCBOAppParams.APIKEY);
				if (apikey) {
					flexoviz.searchProvider.service.apikey = apikey;
				}
				
				// load parameters
				var isVirtual:Boolean = FlexVizParams.getBooleanParam(NCBOAppParams.ONTOLOGY_VIRTUAL, NCBOAppParams.DEFAULT_ONTOLOGY_VIRTUAL);
				var ontologyID:String = FlexVizParams.getParam(NCBOAppParams.ONTOLOGY, NCBOAppParams.DEFAULT_ONTOLOGY);
				var searchNodeID:String = FlexVizParams.getParam(NCBOAppParams.NODE_ID, NCBOAppParams.DEFAULT_NODE_ID);
				var showOption:String = FlexVizParams.getParam(FlexVizParams.SHOW);

				var hideTopBar:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.HIDE_TOPBAR, FlexVizParams.DEFAULT_HIDE_TOPBAR);
				if (hideTopBar) {
					flexoviz.hideTopBar();
				} else {
					var hideFullVersion:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.HIDE_FULLVERSION, FlexVizParams.DEFAULT_HIDE_FULLVERSION);
					if (hideFullVersion) {
						flexoviz.fullVersionButton.visible = false;
					}
					var hideEmail:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.HIDE_EMAIL, FlexVizParams.DEFAULT_HIDE_EMAIL);
					if (hideEmail) {
						flexoviz.emailButton.visible = false;
					}
					var hideBug:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.HIDE_BUG, FlexVizParams.DEFAULT_HIDE_BUG);
					if (hideBug) {
						flexoviz.bugButton.visible = false;
					}
				}
				
				flexoviz.showArcLabels = FlexVizParams.getBooleanParam(FlexVizParams.SHOW_ARC_LABELS, FlexVizParams.DEFAULT_SHOW_ARC_LABELS);
				flexoviz.rotateArcLabels = FlexVizParams.getBooleanParam(FlexVizParams.ROTATE_ARC_LABELS, FlexVizParams.DEFAULT_ROTATE_ARC_LABELS);
				
				if ((ontologyID == null) || (ontologyID.length == 0)) {
					var alertNoOntology:Boolean = FlexVizParams.getBooleanParam(FlexVizParams.ALERT_NO_ONTOLOGY, FlexVizParams.DEFAULT_ALERT_NO_ONTOLOGY);
					if (alertNoOntology) {
						Alert.show("No ontology was defined.", "Warning");
					}
					// disable some features
					flexoviz.graphViewsCombo.enabled = false;
				} else {
					// now load the ontology and perform the layout
					loadOntology(ontologyID, searchNodeID, isVirtual, showOption);
				}

				
				addExternalSupport();
				Utils.callJSFunction("focusApp");
			}
			
			private function addExternalSupport():void {
				Utils.addJSCallback("loadOntology", loadOntology);
				Utils.addJSCallback("selectNodeByID", selectNodeByID);
				Utils.addJSCallback("searchByID", searchByID);
				Utils.addJSCallback("searchByName", searchByName);
				Utils.addJSCallback("getSelectedNodeID", getSelectedNodeID);
				Utils.addJSCallback("getSelectedNodeName", getSelectedNodeName);
				Utils.addJSCallback("getSelectedNodeIDs", getSelectedNodeIDs);
				Utils.addJSCallback("getSelectedNodeNames", getSelectedNodeNames);
				Utils.addJSCallback("addNodeContextMenuItem", addNodeContextMenuItem);
				Utils.addJSCallback("setHeaderText", setHeaderText);
				Utils.addJSCallback("setFooterText", setFooterText);
				Utils.addJSCallback("addNodeMouseOverListener", addNodeMouseOverListener);
				Utils.addJSCallback("addNodeMouseOutListener", addNodeMouseOutListener);
				Utils.addJSCallback("clear", clear);
			}
			
			private function debug(str:String = "", alert:Boolean = false):void {
				if (flexoviz.DEBUG) {
					trace(str);
					if (alert) {
						Alert.show(str, "DEBUG");
					}
				}
			}
			
			public function get swfID():String {
				return flexoviz.swfID;
			}
			
			////////////////////////////////////////
			// IExternalGraphInterface functions
			////////////////////////////////////////
			
			public function clear():void {
				flexoviz.loadOntology(null);
			}
			
			/**
			 * Loads an ontology, and possible focusses on a specific node.
			 * @param ontologyID the id of the ontology to show
			 * @param nodeID the optional id of the node to show, otherwise shows the roots
			 * @param isVirtual if true then the ontology id is a virtual id, if false then it is the version id 
			 * @param showOption the optional string specifying the show option.  Valid strings are:
			 *  "neighborhood", "children", "parents", "hierarchy".
			 */
			public function loadOntology(ontologyID:String, nodeID:String = null, 
										 isVirtual:Boolean = false, showOption:String  = null):void {
				var option:SearchShowOption = SearchShowOption.parse(showOption);
				flexoviz.loadOntology(ontologyID, nodeID, isVirtual, option);
			}
			
			/**
			 * Selects a node with the given id.
			 * If the node doesn't exist in the graph then nothing happens.
			 * @param id the id of the node to select
			 * @param append if true then the node will be appended to the current selection
			 */
			public function selectNodeByID(id:String, append:Boolean = false):void {
				flexoviz.selectNodeByID(id, append);
			}
			
			/**
			 * Searches for the node with the given id, and displays the appropriate graph.
			 * @param id the id of the node
			 * @param option the focus option - neighborhood, hierarchy to root, parents, children
			 */
			public function searchByID(id:String, option:String = null):void {
				if ((id != null) && (StringUtil.trim(id).length > 0)) {
					if (option != null) {
						flexoviz.searchProvider.showOption = SearchShowOption.parse(option);
					}
					flexoviz.searchProvider.performSearchByID(id);
				}				
			}
			
			/**
			 * Searches for the given concept/term by name, and shows the neighborhood or hierarchy to root.
			 * @param name the concept/term name to search for
			 */ 
			public function searchByName(name:String, option:String = null):void {
				if ((name != null) && (StringUtil.trim(name).length > 0)) {
					if (option != null) {
						flexoviz.searchProvider.showOption = SearchShowOption.parse(option);
					}
					flexoviz.searchProvider.performSearchByName(name, SearchMode.CONTAINS);
				}
			}
			
			/** Returns the id of the selected node or null. */
			public function getSelectedNodeID():String {
				return (flexoviz.selectedNode ? flexoviz.selectedNode.id : null);
			}
			
			/** Returns the name of the selected node. */
			public function getSelectedNodeName():String {
				return (flexoviz.selectedNode ? flexoviz.selectedNode.text : null);				
			}
			
			/** Returns the ids of the selected nodes. */
			public function getSelectedNodeIDs():Array {
				var ids:Array = [];
				for each (var node:IGraphNode in flexoviz.selectedNodes) {
					ids.push(node.id);
				}
				return  ids;
			}
			
			/** Returns the names of the selected nodes in an array. */
			public function getSelectedNodeNames():Array {
				var names:Array = [];
				for each (var node:IGraphNode in flexoviz.selectedNodes) {
					names.push(node.text);
				}
				return  names;				
			}
			
			/**
			 * Adds an item to the nodes layer context menu.  When the menu item is selected
			 * the JavaScript function is called with two parameters - the node id and name.
			 * @param menuItemID the id for the menu item
			 * @param label the label for the context menu item
			 * @param jsCallbackFunctionName the name of the JavaScript function to called when the
			 * 	context menu is selected.
			 */ 
			public function addNodeContextMenuItem(menuItemID:String, label:String, jsCallbackFunctionName:String, 
												   separatorBefore:Boolean = false):void {
				if (label && jsCallbackFunctionName) {
					var menu:ContextMenu = flexoviz.nodesLayerContextMenu;
					if (menu.customItems.length < 15) {
						var menuItem:ContextMenuItem = new ContextMenuItem(label, separatorBefore);
						menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:ContextMenuEvent):void {
							var node:IGraphNode = flexoviz.selectedNode;
							ExternalInterface.call(jsCallbackFunctionName, node.id, node.text, menuItemID, swfID);
						});
						menu.customItems.push(menuItem);
					} else {
						Alert.show("Warning - too many context menu items were added (max is 15).");
					}
				}
			}

			public function nodeDoubleClicked(event:GraphNodeEvent):void {
				// in the basic version we want to update the focussed node for the whole page
				var id:String = event.node.id;
				var currentID:String = flexoviz.lastNodeID;
				if (id != currentID) {
					// NEW WAY - call javascript
					Utils.callJSFunction("flexVizNodeClicked", event.node.id, currentID);
				}
			}
			
			public function addNodeMouseOverListener(jsFunctionName:String):void {
				flexoviz.addEventListener(GraphNodeEvent.NODE_MOUSE_OVER, function(event:GraphNodeEvent):void {
					var node:IGraphNode = event.node;
					if (node) {
						Utils.callJSFunction(jsFunctionName, node.id, node.text, flexoviz.searchProvider.ontologyID, 
												mouseX, mouseY, swfID);
					} 
				});
			}
			
			public function addNodeMouseOutListener(jsFunctionName:String):void {
				flexoviz.addEventListener(GraphNodeEvent.NODE_MOUSE_OUT, function(event:GraphNodeEvent):void {
					var node:IGraphNode = event.node;
					if (node) {
						Utils.callJSFunction(jsFunctionName, node.id, node.text, flexoviz.searchProvider.ontologyID, 
												mouseX, mouseY, swfID);
					} 
				});
			}
			
			public function setHeaderText(text:String):void {
				flexoviz.headerLabelText = text;
			}
						
			public function setFooterText(text:String):void {
				flexoviz.footerLabelText = text;
			}
			
		]]>
	</mx:Script>
	
	<local:BasicFlexoVizComponent id="flexoviz" width="100%" height="100%" 
		nodeDoubleClick="nodeDoubleClicked(event)"/>
		
</mx:Application>
