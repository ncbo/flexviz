<?xml version="1.0" encoding="utf-8"?>
<ui:EscapeWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="flex.utils.ui.*" resizable="true"
	layout="vertical" title="Application Parameters" showCloseButton="true" creationComplete="created()" 
	height="620" width="620">

	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import org.ncbo.uvic.flex.NCBORestService;
			import flex.utils.StringUtils;
			import flex.utils.ui.UIUtils;
			import flash.net.navigateToURL;
			import mx.events.CloseEvent;
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			
			[Bindable]
			private var params:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var restCalls:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var restURLs:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var version:String = "";
			
			private var _service:NCBORestService = null;

			public static function showDebugPanel(parent:DisplayObject, version:String = "", 
								service:NCBORestService = null, extraRestCalls:Array = null):DebugPanel {
				var debugPanel:DebugPanel = new DebugPanel();
				debugPanel.service = service;
				if (extraRestCalls) {
					debugPanel.addRestCallURLs(extraRestCalls);
				}
				debugPanel.version = version;
				PopUpManager.addPopUp(debugPanel, parent, true); 
				PopUpManager.centerPopUp(debugPanel);
				debugPanel.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
					PopUpManager.removePopUp(debugPanel);
				});
				return debugPanel;
			}


			private function created():void {
				if (x < 0) {
					x = 0;
				}
				
				status = Capabilities.version;
				var app:Application = Application(Application.application);
				var loader:LoaderInfo = app.loaderInfo;
				appURL.text = unescape(loader ? loader.url : app.url);
				appURL.toolTip = appURL.text;
				if (width >= app.width) {
					width = app.width - 20;
				}
				if (height >= app.height) {
					height = app.height - 20;
				}
				
				if (app.parameters) {
					for (var name:String in app.parameters) {
						params.addItem({ label: name, value: app.parameters[name] });
					}
				}
				changeBaseURLButton.enabled = (service != null);
			}
			
			public function get service():NCBORestService {
				return _service;
			}
			
			public function set service(rest:NCBORestService):void {
				this._service = rest;
				updateServiceParams();
				if (changeBaseURLButton) {
					changeBaseURLButton.enabled = (_service != null);
				}
			}
			
			private function updateServiceParams():void {
				restCalls.removeAll();
				if (service) {
					// reverse the calls to have the newest at the top
					var calls:Array = service.restCalls;
					for (var i:int = calls.length - 1; i >= 0; i--) {
						var call:Object = calls[i];
						// make a generic object so that tooltips work properly
						var obj:Object = { url: call.url, serverTime: call.serverTime, parseTime: call.parseTime }; 
						restCalls.addItem(obj);
					}
					
					restURLs.removeAll();
					restURLs.addItem({ name: "Base URL", url: service.baseURL }); 
					restURLs.addItem({ name: "Ontologies URL", url: service.ontologiesURL }); 
					restURLs.addItem({ name: "Concepts URL", url: service.conceptsURL }); 
					restURLs.addItem({ name: "Search URL", url: service.searchURL }); 
					restURLs.addItem({ name: "Categories URL", url: service.categoriesURL });
				} 
			}
			
			public function addRestURL(name:String, url:String):void {
				restURLs.addItem({ name: name, url: url }); 
			}
			
			public function addRestCallURLs(urls:Array):void {
				for each (var url:String in urls) {
					restCalls.addItem({ url: url, serverTime: 0, parseTime: 0 });
				}
			}
			
			private function openRestURL():void {
				if (restCallsDataGrid.selectedItem != null) {
					var call:String = String(restCallsDataGrid.selectedItem.url); 
					navigateToURL(new URLRequest(call), "REST Call");
				}
			}
			
			private function copyToClipboard1():void {
				if (restCallsDataGrid.selectedItem != null) {
					var call:String = String(restCallsDataGrid.selectedItem.url); 
					System.setClipboard(call);
				}
			}

			private function copyToClipboard2():void {
				if (restURLsDataGrid.selectedItem != null) {
					var url:String = String(restURLsDataGrid.selectedItem.url); 
					System.setClipboard(url);
				}
			}
			
			private function changeBaseURL():void {
				var callback:Function = function(newURL:String):void {
					if (StringUtils.startsWith(newURL, "http", true) && 
						!StringUtils.equals(service.baseURL, newURL)) {
						service.baseURL = newURL;
						updateServiceParams();
					}
				};
				UIUtils.createTextInputPopup("Base URL", service.baseURL, this, true, callback, 400);
			}
			
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" verticalGap="2" paddingTop="2" paddingRight="2" paddingLeft="2" paddingBottom="2"> 
		<mx:HBox width="100%">
			<mx:Label text="Version:" color="#336699" fontSize="12" fontWeight="bold"/>
			<mx:Label fontWeight="bold" id="versionLabel" text="{version}"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="Application URL:" color="#336699" fontSize="12" fontWeight="bold"/>
			<mx:Label fontWeight="bold" id="appURL" maxWidth="450"/>
		</mx:HBox>
		<mx:HBox width="100%" paddingBottom="0" paddingLeft="2" paddingRight="2" paddingTop="2">
			<mx:Label text="Parameters:" color="#336699" fontWeight="bold" fontSize="12"/>
		</mx:HBox>
		<mx:DataGrid width="100%" height="30%" resizableColumns="true" id="paramsDataGrid" editable="false"
			showHeaders="true" sortableColumns="true" variableRowHeight="false" wordWrap="false" dataProvider="{params}">
			<mx:columns>
				<mx:DataGridColumn headerText="Name" dataField="label" width="110"/>
				<mx:DataGridColumn headerText="Value" dataField="value"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:HBox width="100%" paddingRight="2" paddingLeft="2" paddingTop="10" paddingBottom="0" horizontalGap="2">
			<mx:Label text="REST Calls, Server Times, XML Parse Times" fontSize="12" fontWeight="bold" color="#336699"/>
			<mx:Spacer width="100%" height="16"/>
			<mx:Button height="22" width="22" icon="@Embed(source='link.gif')" 
				id="linkButton" click="openRestURL()" toolTip="Open URL in a new window"/>
			<mx:Button toolTip="Copy to clipboard" id="copyButton" icon="@Embed(source='copy.png')" 
				height="22" width="22" click="copyToClipboard1()"/>
		</mx:HBox>
		<mx:DataGrid id="restCallsDataGrid" width="100%" height="30%" dataProvider="{restCalls}"
			editable="false" allowMultipleSelection="false"	doubleClick="openRestURL()" doubleClickEnabled="true">
			<mx:columns>
				<mx:DataGridColumn headerText="URL" dataField="url" width="400" 
					showDataTips="true" dataTipField="url" headerRenderer="mx.controls.Label"/>
				<mx:DataGridColumn headerText="Server Time" dataField="serverTime" width="40" 
					showDataTips="true" dataTipField="serverTime" headerRenderer="mx.controls.Label"/>
				<mx:DataGridColumn headerText="Parse Time" dataField="parseTime" width="35" 
					showDataTips="true" dataTipField="parseTime" headerRenderer="mx.controls.Label"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:HBox width="100%" paddingRight="2" paddingLeft="2" paddingTop="10" paddingBottom="0" horizontalGap="2">
			<mx:Label text="REST URLs" fontSize="12" fontWeight="bold" color="#336699"/>
			<mx:Spacer width="100%" height="16"/>
			<mx:Button label="Change Base URL" click="changeBaseURL()" visible="true" enabled="false"
				id="changeBaseURLButton"/>
			<mx:Button toolTip="Copy to clipboard" id="copyButton2" icon="@Embed(source='copy.png')" 
				height="22" width="22" click="copyToClipboard2()"/>
		</mx:HBox>
		<mx:DataGrid width="100%" height="30%" dataProvider="{restURLs}" id="restURLsDataGrid">
			<mx:columns>
				<mx:DataGridColumn headerText="Name" dataField="name" width="150"/>
				<mx:DataGridColumn headerText="Value" dataField="url"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:VBox>
	
</ui:EscapeWindow>
